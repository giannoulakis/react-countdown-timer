{"version":3,"sources":["ScreenLock.js","Timer.js","App.js","serviceWorker.js","index.js"],"names":["ScreenLock","useEffect","wakeLockObj","window","screen","keepAwake","navigator","wakeLock","request","then","release","Timer","props","useState","Date","getTime","minutes","timestampEnd","calcTimeLeft","timeLeft","setTimeLeft","progress","setProgress","timeFormatted","setTimeFormatted","tick","Math","ceil","floor","substr","timer","setTimeout","clearTimeout","onFinish","onUpdate","className","style","width","setPageTitle","title","document","App","inputEl","useRef","running","setRunning","setMinutes","handleStart","localStorage","setItem","handleStop","handleKeydown","e","keyCode","match","location","hash","saved","getItem","addEventListener","removeEventListener","current","focus","onClick","ref","onKeyDown","type","min","max","value","onChange","target","isLocalhost","Boolean","hostname","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onSuccess","catch","error","ReactDOM","render","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.8c3a277d.chunk.js","sourcesContent":["import { useEffect } from 'react'\n\n\nexport default function ScreenLock(){\n\n  useEffect(()=>{\n    let wakeLockObj;\n    if (\"keepAwake\" in window.screen) {\n      window.screen.keepAwake = true;\n    } else if (\"wakeLock\" in navigator) {\n      navigator.wakeLock.request('screen')\n      .then((wakeLock) => {\n        wakeLockObj = wakeLock;\n      })\n    }\n    return () => {\n      if(window.screen.keepAwake) window.screen.keepAwake = false;\n      if(wakeLockObj) wakeLockObj.release();\n    }\n  },[])\n\n  return null;\n\n}","import React, { useState, useEffect } from 'react';\nimport ScreenLock from './ScreenLock';\n\n\nexport default function Timer(props){\n\n    const [timestampEnd] = useState(new Date().getTime() + props.minutes*60*1000);\n    const [timeLeft, setTimeLeft] = useState(calcTimeLeft());\n    const [progress,setProgress] = useState(0);\n    const [timeFormatted,setTimeFormatted] = useState('00:00');\n\n    function tick(){\n        setTimeLeft(calcTimeLeft());\n    }\n\n    function calcTimeLeft(){\n        return Math.ceil((timestampEnd - new Date().getTime())/1000)*1000;\n    }\n\n    useEffect(()=>{\n        if(timeLeft<=0){\n            props.onFinish && props.onFinish();\n            return;\n        }\n\n        setProgress(100 - Math.floor(timeLeft/(props.minutes*60*1000)*100));\n\n        setTimeFormatted(Math.floor(timeLeft/1000/60)+':'+('0'+(timeLeft/1000)%60).substr(-2,2));\n\n        const timer = setTimeout(tick,1000);\n\n        return () => clearTimeout(timer);\n    },[timeLeft,timestampEnd])\n\n    useEffect(()=>{\n        if(props.onUpdate){\n            props.onUpdate(timeFormatted)\n        }\n    },[timeFormatted])\n\n    return (\n        <div>\n            <ScreenLock />\n            <div className=\"progress\" style={{width:progress+'%'}}></div>\n            <div className=\"clock\">{timeFormatted}</div>\n        </div>\n    );\n\n}","import React, { useState, useRef, useEffect } from 'react';\nimport Timer from './Timer';\n\nfunction App() {\n\n  const inputEl = useRef(null);\n\n  const [running, setRunning] = useState(false);\n  const [minutes, setMinutes] = useState(25);\n\n  function handleStart(){\n    localStorage.setItem('minutes',minutes); //remember\n    setRunning(true);\n  }\n\n  function handleStop(){\n    setRunning(false);\n    setPageTitle('Finished')\n  }\n\n  function handleKeydown(e){\n    return e.keyCode===27 && handleStop()\n  }\n\n  useEffect(()=>{\n    const match = window.location.hash.match(/#(\\d+)/);\n\n    if(match){\n      setMinutes(match[1]);\n      setRunning(true);\n\t\t} else {\n      const saved = localStorage.getItem('minutes');\n      if(saved) setMinutes(saved);\n\t\t}\n    document.addEventListener('keydown',handleKeydown);\n\n    return ()=> document.removeEventListener('keydown',handleKeydown);\n  },[])\n\n\n  useEffect(()=>{\n    if(!running) inputEl.current.focus();\n  },[running])\n\n  return (\n    <main>\n      {!running?\n        (\n          <div className=\"config\">\n            <input ref={ inputEl } onKeyDown={e =>{ e.keyCode===13 && handleStart() }} type=\"number\" min=\"1\" max=\"60\" value={ minutes } onChange={ e => setMinutes(e.target.value) } />\n            <button onClick={ handleStart }>Start</button>\n          </div>\n        )\n        :\n      (\n        <div onClick={ handleStop } title=\"click to stop\" className=\"hand\">\n          <Timer minutes={ minutes } onUpdate={ setPageTitle } onFinish={ handleStop } />\n        </div>\n      )}\n    </main>\n  );\n}\n\n\nfunction setPageTitle(title){\n  document.title = title;\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './global.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render( <App />, document.getElementById('root') );\n\nserviceWorker.register();\n"],"sourceRoot":""}